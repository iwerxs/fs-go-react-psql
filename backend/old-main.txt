package main

import (
	"log"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/jmoiron/sqlx"
	_ "github.com/lib/pq"
)

var db *sqlx.DB

type Name struct {
	ID   int    `json:"id" db:"id"`
	Name string `json:"name" db:"name"`
}

func main() {
	var err error
	// Connect to the database
	db, err = sqlx.Connect("postgres", "user=testusr password=testing dbname=mydatabase sslmode=disable")
	if err != nil {
		log.Fatal(err)
	}

	// Ensure the table exists
	createTableIfNotExists()

	router := gin.Default()

	router.GET("/names", getNames)
	router.POST("/names", createName)
	router.PUT("/names/:id", updateName)
	router.DELETE("/names/:id", deleteName)

	log.Println("Server is running on http://localhost:8080")
	router.Run(":8080")
}

func createTableIfNotExists() {
	createTableQuery := `
    CREATE TABLE IF NOT EXISTS names (
        id SERIAL PRIMARY KEY,
        name VARCHAR(100)
    );`
	_, err := db.Exec(createTableQuery)
	if err != nil {
		log.Fatalf("Could not create table: %v\n", err)
	} else {
		log.Println("Table 'names' created or already exists")
	}
}

func getNames(c *gin.Context) {
	var names []Name
	db.Select(&names, "SELECT * FROM names")
	c.JSON(http.StatusOK, names)
}

func createName(c *gin.Context) {
	var name Name
	if err := c.BindJSON(&name); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	db.Exec("INSERT INTO names (name) VALUES ($1)", name.Name)
	c.JSON(http.StatusOK, gin.H{"message": "Name created"})
}

func updateName(c *gin.Context) {
	var name Name
	if err := c.BindJSON(&name); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	id := c.Param("id")
	db.Exec("UPDATE names SET name=$1 WHERE id=$2", name.Name, id)
	c.JSON(http.StatusOK, gin.H{"message": "Name updated"})
}

func deleteName(c *gin.Context) {
	id := c.Param("id")
	db.Exec("DELETE FROM names WHERE id=$1", id)
	c.JSON(http.StatusOK, gin.H{"message": "Name deleted"})
}